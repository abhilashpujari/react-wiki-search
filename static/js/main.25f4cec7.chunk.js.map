{"version":3,"sources":["components/Loader.js","components/WikiList.js","components/WikiSearch.js","App.js","serviceWorker.js","index.js"],"names":["Loader","react_default","a","createElement","className","WikiList","props","loading","items","src_components_Loader","Object","keys","map","key","thumbnail","rel","href","concat","target","src","source","alt","title","extract","WikiSearch","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","wikiData","fetchWikiData","bind","assertThisInitialized","e","_this2","flashMessenger","preventDefault","searchQuery","document","getElementById","value","url","setState","axios","get","then","response","data","query","pages","catch","error","_this$state","onSubmit","htmlFor","id","placeholder","required","type","onClick","components_WikiList","Component","App","src_components_WikiSearch","lib","arguments","length","undefined","message","toast","position","POSITION","TOP_CENTER","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25f4cec7.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.css';\n\nconst Loader = () => (\n  <div className=\"loader-wrapper\">\n    <div className=\"loader\" />\n  </div>\n);\n\nexport default Loader;\n","import React from 'react';\nimport Loader from './Loader';\n\nconst WikiList = (props) => {\n  const { loading, items } = props;\n\n  return !loading ? (\n    <div className=\"wiki-list\">\n      {\n        Object.keys(items).map(key => (\n          <div className=\"rounded overflow-hidden shadow-lg mb-10\">\n\n            {\n              items[key].thumbnail && <a rel=\"noopener noreferrer\" href={`https://en.wikipedia.org/?curid=${key}`} target=\"_blank\">\n                <img className=\"w-full max-w-xs m-auto\" src={items[key].thumbnail.source} alt={items[key].title} />\n              </a>\n            }\n\n            <div className=\"px-6 py-4\">\n              <div className=\"font-bold text-xl mb-2\">\n                <a className=\"text-blue-500 font-bold\" rel=\"noopener noreferrer\" href={`https://en.wikipedia.org/?curid=${key}`} target=\"_blank\"> {items[key].title}\n                </a>\n              </div>\n              <p className=\"text-gray-700 text-base mb-2\">{items[key].extract}</p>\n              <a className=\"text-blue-500 font-bold\" rel=\"noopener noreferrer\" href={`https://en.wikipedia.org/?curid=${key}`} target=\"_blank\">\n                Read More...\n              </a>\n            </div>\n          </div>\n        ))\n      }\n    </div>\n  ) : <Loader />\n};\n\nexport default WikiList;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport WikiList from './WikiList';\nimport './WikiSearch.css';\n\nclass WikiSearch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wikiData: [],\n      loading: false\n    };\n\n    this.fetchWikiData = this.fetchWikiData.bind(this);\n  }\n\n  fetchWikiData(e) {\n    const { flashMessenger } = this.props;\n    e.preventDefault();\n\n    const searchQuery = document.getElementById('search-box').value;\n    const url = `https://en.wikipedia.org/w/api.php?format=json&action=query&generator=search&gsrnamespace=0&gsrlimit=10&prop=extracts|pageimages&pithumbsize=400&origin=*&exintro&explaintext&exsentences=1&exlimit=max&gsrsearch=${searchQuery}`;\n\n    if (searchQuery) {\n      this.setState({ loading: true });\n      axios.get(url)\n        .then((response) => this.setState({ wikiData: response.data.query.pages, loading: false }))\n        .catch((error) => { this.setState({ loading: false }); })\n    } else {\n      this.setState({ loading: false });\n      flashMessenger('error', 'Search Text field is required');\n    }\n  }\n\n  render() {\n    const { loading, wikiData } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"wiki-search-box\">\n          <div className=\"row form-group\">\n            <div className=\"col-12 text-center\">\n              <h3 className=\"wiki-title\">\n                Wiki Search App\n              </h3>\n            </div>\n          </div>\n\n          <form onSubmit={this.fetchWikiData}>\n            <div className=\"row\">\n              <div className=\"col-12 form-group\">\n                <label htmlFor=\"search-box\" className=\"sr-only\" >Search Text</label>\n                <input id=\"search-box\" placeholder=\"Search Text...\"\n                  className=\"form-control input-lg\" required />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-12 text-center\">\n                <div className=\"row\">\n                  <div className=\"col-xs-12 col-md-6 form-group\">\n                    <button type=\"submit\"\n                      className=\"btn btn-lg btn-primary\"\n                      onClick={this.fetchWikiData}>\n                      Wiki Search\n                    </button>\n                  </div>\n                  <div className=\"col-12 col-md-6 form-group\">\n                    <a className=\"btn btn-lg btn-success\"\n                      rel=\"noopener noreferrer\"\n                      href=\"https://en.wikipedia.org/wiki/Special:Random\"\n                      target=\"_blank\" >\n                      Get Random Wiki\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </form>\n\n          <WikiList loading={loading} items={wikiData} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WikiSearch;","import React, { Component } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport WikiSearch from './components/WikiSearch';\nimport './App.css';\n\nclass App extends Component {\n  static flashMessenger(type = 'default', message = '') {\n    toast(message, {\n      position: toast.POSITION.TOP_CENTER,\n      type\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <WikiSearch flashMessenger={App.flashMessenger} />\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}